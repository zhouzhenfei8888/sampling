package com.sampling.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.sampling.Beans.Dictionary;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "dictionary".
*/
public class DictionaryDao extends AbstractDao<Dictionary, Void> {

    public static final String TABLENAME = "dictionary";

    /**
     * Properties of entity Dictionary.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property ID = new Property(0, String.class, "ID", false, "ID");
        public final static Property NO = new Property(1, String.class, "NO", false, "NO");
        public final static Property Content = new Property(2, String.class, "Content", false, "Content");
        public final static Property T_pid = new Property(3, String.class, "t_pid", false, "T_pid");
        public final static Property Type = new Property(4, String.class, "Type", false, "Type");
        public final static Property Belong = new Property(5, String.class, "Belong", false, "Belong");
        public final static Property B_valid = new Property(6, String.class, "b_valid", false, "B_Valid");
        public final static Property Shortcut = new Property(7, String.class, "Shortcut", false, "Shortcut");
        public final static Property T_BZ = new Property(8, String.class, "T_BZ", false, "T_BZ");
        public final static Property I_BZ = new Property(9, String.class, "I_BZ", false, "I_BZ");
    }


    public DictionaryDao(DaoConfig config) {
        super(config);
    }
    
    public DictionaryDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"dictionary\" (" + //
                "\"ID\" TEXT," + // 0: ID
                "\"NO\" TEXT," + // 1: NO
                "\"Content\" TEXT," + // 2: Content
                "\"T_pid\" TEXT," + // 3: t_pid
                "\"Type\" TEXT," + // 4: Type
                "\"Belong\" TEXT," + // 5: Belong
                "\"B_Valid\" TEXT," + // 6: b_valid
                "\"Shortcut\" TEXT," + // 7: Shortcut
                "\"T_BZ\" TEXT," + // 8: T_BZ
                "\"I_BZ\" TEXT);"); // 9: I_BZ
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"dictionary\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Dictionary entity) {
        stmt.clearBindings();
 
        String ID = entity.getID();
        if (ID != null) {
            stmt.bindString(1, ID);
        }
 
        String NO = entity.getNO();
        if (NO != null) {
            stmt.bindString(2, NO);
        }
 
        String Content = entity.getContent();
        if (Content != null) {
            stmt.bindString(3, Content);
        }
 
        String t_pid = entity.getT_pid();
        if (t_pid != null) {
            stmt.bindString(4, t_pid);
        }
 
        String Type = entity.getType();
        if (Type != null) {
            stmt.bindString(5, Type);
        }
 
        String Belong = entity.getBelong();
        if (Belong != null) {
            stmt.bindString(6, Belong);
        }
 
        String b_valid = entity.getB_valid();
        if (b_valid != null) {
            stmt.bindString(7, b_valid);
        }
 
        String Shortcut = entity.getShortcut();
        if (Shortcut != null) {
            stmt.bindString(8, Shortcut);
        }
 
        String T_BZ = entity.getT_BZ();
        if (T_BZ != null) {
            stmt.bindString(9, T_BZ);
        }
 
        String I_BZ = entity.getI_BZ();
        if (I_BZ != null) {
            stmt.bindString(10, I_BZ);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Dictionary entity) {
        stmt.clearBindings();
 
        String ID = entity.getID();
        if (ID != null) {
            stmt.bindString(1, ID);
        }
 
        String NO = entity.getNO();
        if (NO != null) {
            stmt.bindString(2, NO);
        }
 
        String Content = entity.getContent();
        if (Content != null) {
            stmt.bindString(3, Content);
        }
 
        String t_pid = entity.getT_pid();
        if (t_pid != null) {
            stmt.bindString(4, t_pid);
        }
 
        String Type = entity.getType();
        if (Type != null) {
            stmt.bindString(5, Type);
        }
 
        String Belong = entity.getBelong();
        if (Belong != null) {
            stmt.bindString(6, Belong);
        }
 
        String b_valid = entity.getB_valid();
        if (b_valid != null) {
            stmt.bindString(7, b_valid);
        }
 
        String Shortcut = entity.getShortcut();
        if (Shortcut != null) {
            stmt.bindString(8, Shortcut);
        }
 
        String T_BZ = entity.getT_BZ();
        if (T_BZ != null) {
            stmt.bindString(9, T_BZ);
        }
 
        String I_BZ = entity.getI_BZ();
        if (I_BZ != null) {
            stmt.bindString(10, I_BZ);
        }
    }

    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    @Override
    public Dictionary readEntity(Cursor cursor, int offset) {
        Dictionary entity = new Dictionary( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // ID
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // NO
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // Content
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // t_pid
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // Type
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // Belong
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // b_valid
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // Shortcut
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // T_BZ
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9) // I_BZ
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Dictionary entity, int offset) {
        entity.setID(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setNO(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setContent(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setT_pid(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setType(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setBelong(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setB_valid(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setShortcut(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setT_BZ(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setI_BZ(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
     }
    
    @Override
    protected final Void updateKeyAfterInsert(Dictionary entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    @Override
    public Void getKey(Dictionary entity) {
        return null;
    }

    @Override
    public boolean hasKey(Dictionary entity) {
        // TODO
        return false;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
